/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package rbsa.eoss.javaInterface;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.11.0)", date = "2018-05-17")
public class SubobjectiveDetails implements org.apache.thrift.TBase<SubobjectiveDetails, SubobjectiveDetails._Fields>, java.io.Serializable, Cloneable, Comparable<SubobjectiveDetails> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SubobjectiveDetails");

  private static final org.apache.thrift.protocol.TField PARAM_FIELD_DESC = new org.apache.thrift.protocol.TField("param", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField ATTR_NAMES_FIELD_DESC = new org.apache.thrift.protocol.TField("attr_names", org.apache.thrift.protocol.TType.LIST, (short)2);
  private static final org.apache.thrift.protocol.TField ATTR_VALUES_FIELD_DESC = new org.apache.thrift.protocol.TField("attr_values", org.apache.thrift.protocol.TType.LIST, (short)3);
  private static final org.apache.thrift.protocol.TField SCORES_FIELD_DESC = new org.apache.thrift.protocol.TField("scores", org.apache.thrift.protocol.TType.LIST, (short)4);
  private static final org.apache.thrift.protocol.TField TAKEN_BY_FIELD_DESC = new org.apache.thrift.protocol.TField("taken_by", org.apache.thrift.protocol.TType.LIST, (short)5);
  private static final org.apache.thrift.protocol.TField JUSTIFICATIONS_FIELD_DESC = new org.apache.thrift.protocol.TField("justifications", org.apache.thrift.protocol.TType.LIST, (short)6);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new SubobjectiveDetailsStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new SubobjectiveDetailsTupleSchemeFactory();

  public String param; // required
  public java.util.List<String> attr_names; // required
  public java.util.List<java.util.List<String>> attr_values; // required
  public java.util.List<Double> scores; // required
  public java.util.List<String> taken_by; // required
  public java.util.List<java.util.List<String>> justifications; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    PARAM((short)1, "param"),
    ATTR_NAMES((short)2, "attr_names"),
    ATTR_VALUES((short)3, "attr_values"),
    SCORES((short)4, "scores"),
    TAKEN_BY((short)5, "taken_by"),
    JUSTIFICATIONS((short)6, "justifications");

    private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PARAM
          return PARAM;
        case 2: // ATTR_NAMES
          return ATTR_NAMES;
        case 3: // ATTR_VALUES
          return ATTR_VALUES;
        case 4: // SCORES
          return SCORES;
        case 5: // TAKEN_BY
          return TAKEN_BY;
        case 6: // JUSTIFICATIONS
          return JUSTIFICATIONS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PARAM, new org.apache.thrift.meta_data.FieldMetaData("param", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ATTR_NAMES, new org.apache.thrift.meta_data.FieldMetaData("attr_names", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.ATTR_VALUES, new org.apache.thrift.meta_data.FieldMetaData("attr_values", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)))));
    tmpMap.put(_Fields.SCORES, new org.apache.thrift.meta_data.FieldMetaData("scores", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE))));
    tmpMap.put(_Fields.TAKEN_BY, new org.apache.thrift.meta_data.FieldMetaData("taken_by", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.JUSTIFICATIONS, new org.apache.thrift.meta_data.FieldMetaData("justifications", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)))));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SubobjectiveDetails.class, metaDataMap);
  }

  public SubobjectiveDetails() {
  }

  public SubobjectiveDetails(
    String param,
    java.util.List<String> attr_names,
    java.util.List<java.util.List<String>> attr_values,
    java.util.List<Double> scores,
    java.util.List<String> taken_by,
    java.util.List<java.util.List<String>> justifications)
  {
    this();
    this.param = param;
    this.attr_names = attr_names;
    this.attr_values = attr_values;
    this.scores = scores;
    this.taken_by = taken_by;
    this.justifications = justifications;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public SubobjectiveDetails(SubobjectiveDetails other) {
    if (other.isSetParam()) {
      this.param = other.param;
    }
    if (other.isSetAttr_names()) {
      java.util.List<String> __this__attr_names = new java.util.ArrayList<String>(other.attr_names);
      this.attr_names = __this__attr_names;
    }
    if (other.isSetAttr_values()) {
      java.util.List<java.util.List<String>> __this__attr_values = new java.util.ArrayList<java.util.List<String>>(other.attr_values.size());
      for (java.util.List<String> other_element : other.attr_values) {
        java.util.List<String> __this__attr_values_copy = new java.util.ArrayList<String>(other_element);
        __this__attr_values.add(__this__attr_values_copy);
      }
      this.attr_values = __this__attr_values;
    }
    if (other.isSetScores()) {
      java.util.List<Double> __this__scores = new java.util.ArrayList<Double>(other.scores);
      this.scores = __this__scores;
    }
    if (other.isSetTaken_by()) {
      java.util.List<String> __this__taken_by = new java.util.ArrayList<String>(other.taken_by);
      this.taken_by = __this__taken_by;
    }
    if (other.isSetJustifications()) {
      java.util.List<java.util.List<String>> __this__justifications = new java.util.ArrayList<java.util.List<String>>(other.justifications.size());
      for (java.util.List<String> other_element : other.justifications) {
        java.util.List<String> __this__justifications_copy = new java.util.ArrayList<String>(other_element);
        __this__justifications.add(__this__justifications_copy);
      }
      this.justifications = __this__justifications;
    }
  }

  public SubobjectiveDetails deepCopy() {
    return new SubobjectiveDetails(this);
  }

  @Override
  public void clear() {
    this.param = null;
    this.attr_names = null;
    this.attr_values = null;
    this.scores = null;
    this.taken_by = null;
    this.justifications = null;
  }

  public String getParam() {
    return this.param;
  }

  public SubobjectiveDetails setParam(String param) {
    this.param = param;
    return this;
  }

  public void unsetParam() {
    this.param = null;
  }

  /** Returns true if field param is set (has been assigned a value) and false otherwise */
  public boolean isSetParam() {
    return this.param != null;
  }

  public void setParamIsSet(boolean value) {
    if (!value) {
      this.param = null;
    }
  }

  public int getAttr_namesSize() {
    return (this.attr_names == null) ? 0 : this.attr_names.size();
  }

  public java.util.Iterator<String> getAttr_namesIterator() {
    return (this.attr_names == null) ? null : this.attr_names.iterator();
  }

  public void addToAttr_names(String elem) {
    if (this.attr_names == null) {
      this.attr_names = new java.util.ArrayList<String>();
    }
    this.attr_names.add(elem);
  }

  public java.util.List<String> getAttr_names() {
    return this.attr_names;
  }

  public SubobjectiveDetails setAttr_names(java.util.List<String> attr_names) {
    this.attr_names = attr_names;
    return this;
  }

  public void unsetAttr_names() {
    this.attr_names = null;
  }

  /** Returns true if field attr_names is set (has been assigned a value) and false otherwise */
  public boolean isSetAttr_names() {
    return this.attr_names != null;
  }

  public void setAttr_namesIsSet(boolean value) {
    if (!value) {
      this.attr_names = null;
    }
  }

  public int getAttr_valuesSize() {
    return (this.attr_values == null) ? 0 : this.attr_values.size();
  }

  public java.util.Iterator<java.util.List<String>> getAttr_valuesIterator() {
    return (this.attr_values == null) ? null : this.attr_values.iterator();
  }

  public void addToAttr_values(java.util.List<String> elem) {
    if (this.attr_values == null) {
      this.attr_values = new java.util.ArrayList<java.util.List<String>>();
    }
    this.attr_values.add(elem);
  }

  public java.util.List<java.util.List<String>> getAttr_values() {
    return this.attr_values;
  }

  public SubobjectiveDetails setAttr_values(java.util.List<java.util.List<String>> attr_values) {
    this.attr_values = attr_values;
    return this;
  }

  public void unsetAttr_values() {
    this.attr_values = null;
  }

  /** Returns true if field attr_values is set (has been assigned a value) and false otherwise */
  public boolean isSetAttr_values() {
    return this.attr_values != null;
  }

  public void setAttr_valuesIsSet(boolean value) {
    if (!value) {
      this.attr_values = null;
    }
  }

  public int getScoresSize() {
    return (this.scores == null) ? 0 : this.scores.size();
  }

  public java.util.Iterator<Double> getScoresIterator() {
    return (this.scores == null) ? null : this.scores.iterator();
  }

  public void addToScores(double elem) {
    if (this.scores == null) {
      this.scores = new java.util.ArrayList<Double>();
    }
    this.scores.add(elem);
  }

  public java.util.List<Double> getScores() {
    return this.scores;
  }

  public SubobjectiveDetails setScores(java.util.List<Double> scores) {
    this.scores = scores;
    return this;
  }

  public void unsetScores() {
    this.scores = null;
  }

  /** Returns true if field scores is set (has been assigned a value) and false otherwise */
  public boolean isSetScores() {
    return this.scores != null;
  }

  public void setScoresIsSet(boolean value) {
    if (!value) {
      this.scores = null;
    }
  }

  public int getTaken_bySize() {
    return (this.taken_by == null) ? 0 : this.taken_by.size();
  }

  public java.util.Iterator<String> getTaken_byIterator() {
    return (this.taken_by == null) ? null : this.taken_by.iterator();
  }

  public void addToTaken_by(String elem) {
    if (this.taken_by == null) {
      this.taken_by = new java.util.ArrayList<String>();
    }
    this.taken_by.add(elem);
  }

  public java.util.List<String> getTaken_by() {
    return this.taken_by;
  }

  public SubobjectiveDetails setTaken_by(java.util.List<String> taken_by) {
    this.taken_by = taken_by;
    return this;
  }

  public void unsetTaken_by() {
    this.taken_by = null;
  }

  /** Returns true if field taken_by is set (has been assigned a value) and false otherwise */
  public boolean isSetTaken_by() {
    return this.taken_by != null;
  }

  public void setTaken_byIsSet(boolean value) {
    if (!value) {
      this.taken_by = null;
    }
  }

  public int getJustificationsSize() {
    return (this.justifications == null) ? 0 : this.justifications.size();
  }

  public java.util.Iterator<java.util.List<String>> getJustificationsIterator() {
    return (this.justifications == null) ? null : this.justifications.iterator();
  }

  public void addToJustifications(java.util.List<String> elem) {
    if (this.justifications == null) {
      this.justifications = new java.util.ArrayList<java.util.List<String>>();
    }
    this.justifications.add(elem);
  }

  public java.util.List<java.util.List<String>> getJustifications() {
    return this.justifications;
  }

  public SubobjectiveDetails setJustifications(java.util.List<java.util.List<String>> justifications) {
    this.justifications = justifications;
    return this;
  }

  public void unsetJustifications() {
    this.justifications = null;
  }

  /** Returns true if field justifications is set (has been assigned a value) and false otherwise */
  public boolean isSetJustifications() {
    return this.justifications != null;
  }

  public void setJustificationsIsSet(boolean value) {
    if (!value) {
      this.justifications = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case PARAM:
      if (value == null) {
        unsetParam();
      } else {
        setParam((String)value);
      }
      break;

    case ATTR_NAMES:
      if (value == null) {
        unsetAttr_names();
      } else {
        setAttr_names((java.util.List<String>)value);
      }
      break;

    case ATTR_VALUES:
      if (value == null) {
        unsetAttr_values();
      } else {
        setAttr_values((java.util.List<java.util.List<String>>)value);
      }
      break;

    case SCORES:
      if (value == null) {
        unsetScores();
      } else {
        setScores((java.util.List<Double>)value);
      }
      break;

    case TAKEN_BY:
      if (value == null) {
        unsetTaken_by();
      } else {
        setTaken_by((java.util.List<String>)value);
      }
      break;

    case JUSTIFICATIONS:
      if (value == null) {
        unsetJustifications();
      } else {
        setJustifications((java.util.List<java.util.List<String>>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case PARAM:
      return getParam();

    case ATTR_NAMES:
      return getAttr_names();

    case ATTR_VALUES:
      return getAttr_values();

    case SCORES:
      return getScores();

    case TAKEN_BY:
      return getTaken_by();

    case JUSTIFICATIONS:
      return getJustifications();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case PARAM:
      return isSetParam();
    case ATTR_NAMES:
      return isSetAttr_names();
    case ATTR_VALUES:
      return isSetAttr_values();
    case SCORES:
      return isSetScores();
    case TAKEN_BY:
      return isSetTaken_by();
    case JUSTIFICATIONS:
      return isSetJustifications();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof SubobjectiveDetails)
      return this.equals((SubobjectiveDetails)that);
    return false;
  }

  public boolean equals(SubobjectiveDetails that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_param = true && this.isSetParam();
    boolean that_present_param = true && that.isSetParam();
    if (this_present_param || that_present_param) {
      if (!(this_present_param && that_present_param))
        return false;
      if (!this.param.equals(that.param))
        return false;
    }

    boolean this_present_attr_names = true && this.isSetAttr_names();
    boolean that_present_attr_names = true && that.isSetAttr_names();
    if (this_present_attr_names || that_present_attr_names) {
      if (!(this_present_attr_names && that_present_attr_names))
        return false;
      if (!this.attr_names.equals(that.attr_names))
        return false;
    }

    boolean this_present_attr_values = true && this.isSetAttr_values();
    boolean that_present_attr_values = true && that.isSetAttr_values();
    if (this_present_attr_values || that_present_attr_values) {
      if (!(this_present_attr_values && that_present_attr_values))
        return false;
      if (!this.attr_values.equals(that.attr_values))
        return false;
    }

    boolean this_present_scores = true && this.isSetScores();
    boolean that_present_scores = true && that.isSetScores();
    if (this_present_scores || that_present_scores) {
      if (!(this_present_scores && that_present_scores))
        return false;
      if (!this.scores.equals(that.scores))
        return false;
    }

    boolean this_present_taken_by = true && this.isSetTaken_by();
    boolean that_present_taken_by = true && that.isSetTaken_by();
    if (this_present_taken_by || that_present_taken_by) {
      if (!(this_present_taken_by && that_present_taken_by))
        return false;
      if (!this.taken_by.equals(that.taken_by))
        return false;
    }

    boolean this_present_justifications = true && this.isSetJustifications();
    boolean that_present_justifications = true && that.isSetJustifications();
    if (this_present_justifications || that_present_justifications) {
      if (!(this_present_justifications && that_present_justifications))
        return false;
      if (!this.justifications.equals(that.justifications))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetParam()) ? 131071 : 524287);
    if (isSetParam())
      hashCode = hashCode * 8191 + param.hashCode();

    hashCode = hashCode * 8191 + ((isSetAttr_names()) ? 131071 : 524287);
    if (isSetAttr_names())
      hashCode = hashCode * 8191 + attr_names.hashCode();

    hashCode = hashCode * 8191 + ((isSetAttr_values()) ? 131071 : 524287);
    if (isSetAttr_values())
      hashCode = hashCode * 8191 + attr_values.hashCode();

    hashCode = hashCode * 8191 + ((isSetScores()) ? 131071 : 524287);
    if (isSetScores())
      hashCode = hashCode * 8191 + scores.hashCode();

    hashCode = hashCode * 8191 + ((isSetTaken_by()) ? 131071 : 524287);
    if (isSetTaken_by())
      hashCode = hashCode * 8191 + taken_by.hashCode();

    hashCode = hashCode * 8191 + ((isSetJustifications()) ? 131071 : 524287);
    if (isSetJustifications())
      hashCode = hashCode * 8191 + justifications.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(SubobjectiveDetails other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetParam()).compareTo(other.isSetParam());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetParam()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.param, other.param);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAttr_names()).compareTo(other.isSetAttr_names());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAttr_names()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.attr_names, other.attr_names);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAttr_values()).compareTo(other.isSetAttr_values());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAttr_values()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.attr_values, other.attr_values);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetScores()).compareTo(other.isSetScores());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetScores()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.scores, other.scores);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTaken_by()).compareTo(other.isSetTaken_by());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTaken_by()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.taken_by, other.taken_by);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetJustifications()).compareTo(other.isSetJustifications());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetJustifications()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.justifications, other.justifications);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("SubobjectiveDetails(");
    boolean first = true;

    sb.append("param:");
    if (this.param == null) {
      sb.append("null");
    } else {
      sb.append(this.param);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("attr_names:");
    if (this.attr_names == null) {
      sb.append("null");
    } else {
      sb.append(this.attr_names);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("attr_values:");
    if (this.attr_values == null) {
      sb.append("null");
    } else {
      sb.append(this.attr_values);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("scores:");
    if (this.scores == null) {
      sb.append("null");
    } else {
      sb.append(this.scores);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("taken_by:");
    if (this.taken_by == null) {
      sb.append("null");
    } else {
      sb.append(this.taken_by);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("justifications:");
    if (this.justifications == null) {
      sb.append("null");
    } else {
      sb.append(this.justifications);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class SubobjectiveDetailsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public SubobjectiveDetailsStandardScheme getScheme() {
      return new SubobjectiveDetailsStandardScheme();
    }
  }

  private static class SubobjectiveDetailsStandardScheme extends org.apache.thrift.scheme.StandardScheme<SubobjectiveDetails> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, SubobjectiveDetails struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PARAM
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.param = iprot.readString();
              struct.setParamIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // ATTR_NAMES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list54 = iprot.readListBegin();
                struct.attr_names = new java.util.ArrayList<String>(_list54.size);
                String _elem55;
                for (int _i56 = 0; _i56 < _list54.size; ++_i56)
                {
                  _elem55 = iprot.readString();
                  struct.attr_names.add(_elem55);
                }
                iprot.readListEnd();
              }
              struct.setAttr_namesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // ATTR_VALUES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list57 = iprot.readListBegin();
                struct.attr_values = new java.util.ArrayList<java.util.List<String>>(_list57.size);
                java.util.List<String> _elem58;
                for (int _i59 = 0; _i59 < _list57.size; ++_i59)
                {
                  {
                    org.apache.thrift.protocol.TList _list60 = iprot.readListBegin();
                    _elem58 = new java.util.ArrayList<String>(_list60.size);
                    String _elem61;
                    for (int _i62 = 0; _i62 < _list60.size; ++_i62)
                    {
                      _elem61 = iprot.readString();
                      _elem58.add(_elem61);
                    }
                    iprot.readListEnd();
                  }
                  struct.attr_values.add(_elem58);
                }
                iprot.readListEnd();
              }
              struct.setAttr_valuesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // SCORES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list63 = iprot.readListBegin();
                struct.scores = new java.util.ArrayList<Double>(_list63.size);
                double _elem64;
                for (int _i65 = 0; _i65 < _list63.size; ++_i65)
                {
                  _elem64 = iprot.readDouble();
                  struct.scores.add(_elem64);
                }
                iprot.readListEnd();
              }
              struct.setScoresIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // TAKEN_BY
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list66 = iprot.readListBegin();
                struct.taken_by = new java.util.ArrayList<String>(_list66.size);
                String _elem67;
                for (int _i68 = 0; _i68 < _list66.size; ++_i68)
                {
                  _elem67 = iprot.readString();
                  struct.taken_by.add(_elem67);
                }
                iprot.readListEnd();
              }
              struct.setTaken_byIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // JUSTIFICATIONS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list69 = iprot.readListBegin();
                struct.justifications = new java.util.ArrayList<java.util.List<String>>(_list69.size);
                java.util.List<String> _elem70;
                for (int _i71 = 0; _i71 < _list69.size; ++_i71)
                {
                  {
                    org.apache.thrift.protocol.TList _list72 = iprot.readListBegin();
                    _elem70 = new java.util.ArrayList<String>(_list72.size);
                    String _elem73;
                    for (int _i74 = 0; _i74 < _list72.size; ++_i74)
                    {
                      _elem73 = iprot.readString();
                      _elem70.add(_elem73);
                    }
                    iprot.readListEnd();
                  }
                  struct.justifications.add(_elem70);
                }
                iprot.readListEnd();
              }
              struct.setJustificationsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, SubobjectiveDetails struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.param != null) {
        oprot.writeFieldBegin(PARAM_FIELD_DESC);
        oprot.writeString(struct.param);
        oprot.writeFieldEnd();
      }
      if (struct.attr_names != null) {
        oprot.writeFieldBegin(ATTR_NAMES_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.attr_names.size()));
          for (String _iter75 : struct.attr_names)
          {
            oprot.writeString(_iter75);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.attr_values != null) {
        oprot.writeFieldBegin(ATTR_VALUES_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.LIST, struct.attr_values.size()));
          for (java.util.List<String> _iter76 : struct.attr_values)
          {
            {
              oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, _iter76.size()));
              for (String _iter77 : _iter76)
              {
                oprot.writeString(_iter77);
              }
              oprot.writeListEnd();
            }
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.scores != null) {
        oprot.writeFieldBegin(SCORES_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.DOUBLE, struct.scores.size()));
          for (double _iter78 : struct.scores)
          {
            oprot.writeDouble(_iter78);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.taken_by != null) {
        oprot.writeFieldBegin(TAKEN_BY_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.taken_by.size()));
          for (String _iter79 : struct.taken_by)
          {
            oprot.writeString(_iter79);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.justifications != null) {
        oprot.writeFieldBegin(JUSTIFICATIONS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.LIST, struct.justifications.size()));
          for (java.util.List<String> _iter80 : struct.justifications)
          {
            {
              oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, _iter80.size()));
              for (String _iter81 : _iter80)
              {
                oprot.writeString(_iter81);
              }
              oprot.writeListEnd();
            }
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class SubobjectiveDetailsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public SubobjectiveDetailsTupleScheme getScheme() {
      return new SubobjectiveDetailsTupleScheme();
    }
  }

  private static class SubobjectiveDetailsTupleScheme extends org.apache.thrift.scheme.TupleScheme<SubobjectiveDetails> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, SubobjectiveDetails struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetParam()) {
        optionals.set(0);
      }
      if (struct.isSetAttr_names()) {
        optionals.set(1);
      }
      if (struct.isSetAttr_values()) {
        optionals.set(2);
      }
      if (struct.isSetScores()) {
        optionals.set(3);
      }
      if (struct.isSetTaken_by()) {
        optionals.set(4);
      }
      if (struct.isSetJustifications()) {
        optionals.set(5);
      }
      oprot.writeBitSet(optionals, 6);
      if (struct.isSetParam()) {
        oprot.writeString(struct.param);
      }
      if (struct.isSetAttr_names()) {
        {
          oprot.writeI32(struct.attr_names.size());
          for (String _iter82 : struct.attr_names)
          {
            oprot.writeString(_iter82);
          }
        }
      }
      if (struct.isSetAttr_values()) {
        {
          oprot.writeI32(struct.attr_values.size());
          for (java.util.List<String> _iter83 : struct.attr_values)
          {
            {
              oprot.writeI32(_iter83.size());
              for (String _iter84 : _iter83)
              {
                oprot.writeString(_iter84);
              }
            }
          }
        }
      }
      if (struct.isSetScores()) {
        {
          oprot.writeI32(struct.scores.size());
          for (double _iter85 : struct.scores)
          {
            oprot.writeDouble(_iter85);
          }
        }
      }
      if (struct.isSetTaken_by()) {
        {
          oprot.writeI32(struct.taken_by.size());
          for (String _iter86 : struct.taken_by)
          {
            oprot.writeString(_iter86);
          }
        }
      }
      if (struct.isSetJustifications()) {
        {
          oprot.writeI32(struct.justifications.size());
          for (java.util.List<String> _iter87 : struct.justifications)
          {
            {
              oprot.writeI32(_iter87.size());
              for (String _iter88 : _iter87)
              {
                oprot.writeString(_iter88);
              }
            }
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, SubobjectiveDetails struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(6);
      if (incoming.get(0)) {
        struct.param = iprot.readString();
        struct.setParamIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TList _list89 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.attr_names = new java.util.ArrayList<String>(_list89.size);
          String _elem90;
          for (int _i91 = 0; _i91 < _list89.size; ++_i91)
          {
            _elem90 = iprot.readString();
            struct.attr_names.add(_elem90);
          }
        }
        struct.setAttr_namesIsSet(true);
      }
      if (incoming.get(2)) {
        {
          org.apache.thrift.protocol.TList _list92 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.LIST, iprot.readI32());
          struct.attr_values = new java.util.ArrayList<java.util.List<String>>(_list92.size);
          java.util.List<String> _elem93;
          for (int _i94 = 0; _i94 < _list92.size; ++_i94)
          {
            {
              org.apache.thrift.protocol.TList _list95 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
              _elem93 = new java.util.ArrayList<String>(_list95.size);
              String _elem96;
              for (int _i97 = 0; _i97 < _list95.size; ++_i97)
              {
                _elem96 = iprot.readString();
                _elem93.add(_elem96);
              }
            }
            struct.attr_values.add(_elem93);
          }
        }
        struct.setAttr_valuesIsSet(true);
      }
      if (incoming.get(3)) {
        {
          org.apache.thrift.protocol.TList _list98 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.DOUBLE, iprot.readI32());
          struct.scores = new java.util.ArrayList<Double>(_list98.size);
          double _elem99;
          for (int _i100 = 0; _i100 < _list98.size; ++_i100)
          {
            _elem99 = iprot.readDouble();
            struct.scores.add(_elem99);
          }
        }
        struct.setScoresIsSet(true);
      }
      if (incoming.get(4)) {
        {
          org.apache.thrift.protocol.TList _list101 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.taken_by = new java.util.ArrayList<String>(_list101.size);
          String _elem102;
          for (int _i103 = 0; _i103 < _list101.size; ++_i103)
          {
            _elem102 = iprot.readString();
            struct.taken_by.add(_elem102);
          }
        }
        struct.setTaken_byIsSet(true);
      }
      if (incoming.get(5)) {
        {
          org.apache.thrift.protocol.TList _list104 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.LIST, iprot.readI32());
          struct.justifications = new java.util.ArrayList<java.util.List<String>>(_list104.size);
          java.util.List<String> _elem105;
          for (int _i106 = 0; _i106 < _list104.size; ++_i106)
          {
            {
              org.apache.thrift.protocol.TList _list107 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
              _elem105 = new java.util.ArrayList<String>(_list107.size);
              String _elem108;
              for (int _i109 = 0; _i109 < _list107.size; ++_i109)
              {
                _elem108 = iprot.readString();
                _elem105.add(_elem108);
              }
            }
            struct.justifications.add(_elem105);
          }
        }
        struct.setJustificationsIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

